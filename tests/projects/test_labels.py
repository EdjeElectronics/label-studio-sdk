# This file was auto-generated by Fern from our API Definition.

from label_studio_sdk import LabelLink
from label_studio_sdk.client import AsyncLabelStudio, LabelStudio

from ..utilities import validate_response


async def test_list_(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {
        "count": 1,
        "next": "next",
        "previous": "previous",
        "results": [{"id": 1, "annotations_count": 1, "from_name": "from_name", "project": 1, "label": 1}],
    }
    expected_types = {
        "count": "integer",
        "next": None,
        "previous": None,
        "results": (
            "list",
            {
                0: {
                    "id": "integer",
                    "annotations_count": "integer",
                    "from_name": None,
                    "project": "integer",
                    "label": "integer",
                }
            },
        ),
    }
    response = client.projects.labels.list()
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.labels.list()
    validate_response(async_response, expected_response, expected_types)


async def test_create(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {"id": 1, "annotations_count": 1, "from_name": "from_name", "project": 1, "label": 1}
    expected_types = {
        "id": "integer",
        "annotations_count": "integer",
        "from_name": None,
        "project": "integer",
        "label": "integer",
    }
    response = client.projects.labels.create(request=LabelLink(from_name="from_name", project=1, label=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.labels.create(
        request=LabelLink(from_name="from_name", project=1, label=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_get(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {"id": 1, "annotations_count": 1, "from_name": "from_name", "project": 1, "label": 1}
    expected_types = {
        "id": "integer",
        "annotations_count": "integer",
        "from_name": None,
        "project": "integer",
        "label": "integer",
    }
    response = client.projects.labels.get(id="id")
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.labels.get(id="id")
    validate_response(async_response, expected_response, expected_types)


async def test_delete(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.projects.labels.delete(id="id") is None  # type: ignore[func-returns-value]

    assert await async_client.projects.labels.delete(id="id") is None  # type: ignore[func-returns-value]


async def test_update(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    expected_response = {"id": 1, "annotations_count": 1, "from_name": "from_name", "project": 1, "label": 1}
    expected_types = {
        "id": "integer",
        "annotations_count": "integer",
        "from_name": None,
        "project": "integer",
        "label": "integer",
    }
    response = client.projects.labels.update(id="id", request=LabelLink(from_name="from_name", project=1, label=1))
    validate_response(response, expected_response, expected_types)

    async_response = await async_client.projects.labels.update(
        id="id", request=LabelLink(from_name="from_name", project=1, label=1)
    )
    validate_response(async_response, expected_response, expected_types)


async def test_update_many(client: LabelStudio, async_client: AsyncLabelStudio) -> None:
    # Type ignore to avoid mypy complaining about the function not being meant to return a value
    assert client.projects.labels.update_many() is None  # type: ignore[func-returns-value]

    assert await async_client.projects.labels.update_many() is None  # type: ignore[func-returns-value]
