types:
  TasksCreateManyRequestItem:
    properties:
      data:
        type: optional<map<string, unknown>>
        docs: Data of the task
      project:
        type: optional<integer>
        docs: Project ID for this task
      annotations:
        type: optional<list<map<string, unknown>>>
        docs: Annotations for this task
      predictions:
        type: optional<list<map<string, unknown>>>
        docs: Predictions for this task
      is_labeled:
        type: optional<boolean>
        docs: Whether the task is labeled or not
      overlap:
        type: optional<double>
        docs: Overlap for the task
  TasksCreateManyResponse:
    docs: Task creation response
    properties:
      task_count:
        type: optional<integer>
        docs: Number of tasks added
      annotation_count:
        type: optional<integer>
        docs: Number of annotations added
      predictions_count:
        type: optional<integer>
        docs: Number of predictions added
      duration:
        type: optional<double>
        docs: Time in seconds to create
      file_upload_ids:
        type: optional<list<integer>>
        docs: Database IDs of uploaded files
      could_be_tasks_list:
        type: optional<boolean>
        docs: Whether uploaded files can contain lists of tasks, like CSV/TSV files
      found_formats:
        type: optional<list<string>>
        docs: The list of found file formats
      data_columns:
        type: optional<list<string>>
        docs: The list of found data columns
  TasksListRequestFields:
    enum:
      - all
      - task_only
  TasksListResponse:
    properties:
      tasks:
        type: optional<list<root.Task>>
        docs: List of tasks
      total:
        type: optional<integer>
        docs: Total number of tasks
      total_annotations:
        type: optional<integer>
        docs: Total number of annotations
      total_predictions:
        type: optional<integer>
        docs: Total number of predictions
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_many:
      path: /api/projects/{id}/import
      method: POST
      auth: true
      docs: >

        Import data as labeling tasks in bulk using this API endpoint. You can
        use this API endpoint to import multiple tasks.

        One POST request is limited at 250K tasks and 200 MB.


        **Note:** Imported data is verified against a project *label_config* and
        must

        include all variables that were used in the *label_config*. For example,

        if the label configuration has a *$text* variable, then each item in a
        data object

        must include a "text" field.

        <br>


        ## POST requests

        <hr style="opacity:0.3">


        There are three possible ways to import tasks with this endpoint:


        ### 1\. **POST with data**

        Send JSON tasks as POST data. Only JSON is supported for POSTing files
        directly.

        Update this example to specify your authorization token and Label Studio
        instance host, then run the following from

        the command line.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"text":
        "Some text 1"}, {"text": "Some text 2"}]'

        ```


        ### 2\. **POST with files**

        Send tasks as files. You can attach multiple files with different names.


        - **JSON**: text files in JavaScript object notation format

        - **CSV**: text files with tables in Comma Separated Values format

        - **TSV**: text files with tables in Tab Separated Value format

        - **TXT**: simple text files are similar to CSV with one column and no
        header, supported for projects with one source only


        Update this example to specify your authorization token, Label Studio
        instance host, and file name and path,

        then run the following from the command line:


        ```bash

        curl -H 'Authorization: Token abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' -F
        ‘file=@path/to/my_file.csv’

        ```


        ### 3\. **POST with URL**

        You can also provide a URL to a file with labeling tasks. Supported file
        formats are the same as in option 2.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' \

        --data '[{"url": "http://example.com/test1.csv"}, {"url":
        "http://example.com/test2.csv"}]'

        ```


        <br>
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Import tasks
      request:
        body: list<TasksCreateManyRequestItem>
      response:
        docs: Tasks successfully imported
        type: TasksCreateManyResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            id: 1
          request:
            - {}
          response:
            body:
              task_count: 1
              annotation_count: 1
              predictions_count: 1
              duration: 1.1
              file_upload_ids:
                - 1
              could_be_tasks_list: true
              found_formats:
                - found_formats
              data_columns:
                - data_columns
    create_many_status:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: Return data related to async project import operation
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project import.
        import_pk: string
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: import_pk
          response:
            body:
              id: 1
              preannotated_from_fields:
                preannotated_from_fields:
                  key: value
              commit_to_project: true
              return_task_ids: true
              status: created
              url: url
              traceback: traceback
              error: error
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              finished_at: '2024-01-15T09:30:00Z'
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              could_be_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              tasks:
                tasks:
                  key: value
              task_ids:
                task_ids:
                  key: value
              project: 1
      audiences:
        - public
    list:
      path: /api/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a list of tasks with pagination for a specific view or project,
        by using filters and ordering.
      pagination:
        offset: $request.page
        results: $response.tasks
      display-name: Get tasks list
      request:
        name: TasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
          view:
            type: optional<integer>
            docs: View ID
          project:
            type: optional<integer>
            docs: Project ID
          resolve_uri:
            type: optional<boolean>
            docs: Resolve task data URIs using Cloud Storage
          fields:
            type: optional<TasksListRequestFields>
            docs: >-
              Set to "all" if you want to include annotations and predictions in
              the response
          review:
            type: optional<boolean>
            docs: Get tasks for review
          include:
            type: optional<string>
            docs: Specify which fields to include in the response
      response:
        docs: List of Tasks
        type: TasksListResponse
      examples:
        - response:
            body:
              tasks:
                - id: 1
                  predictions:
                    - {}
                  annotations:
                    - {}
                  drafts:
                    - {}
                  annotators:
                    - 1
                  inner_id: 1
                  cancelled_annotations: 1
                  total_annotations: 1
                  total_predictions: 1
                  completed_at: '2024-01-15T09:30:00Z'
                  file_upload: 1
                  storage_filename: storage_filename
                  avg_lead_time: 1.1
                  draft_exists: true
                  updated_by:
                    - {}
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  is_labeled: true
                  overlap: 1.1
                  comment_count: 1
                  unresolved_comment_count: 1
                  last_comment_updated_at: '2024-01-15T09:30:00Z'
                  project: 1
                  comment_authors:
                    - 1
              total: 1
              total_annotations: 1
              total_predictions: 1
      audiences:
        - public
    create:
      path: /api/tasks/
      method: POST
      auth: true
      docs: Create a new labeling task in Label Studio.
      display-name: Create task
      request:
        name: TasksCreateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: ''
        type: root.BaseTask
      examples:
        - request: {}
          response:
            body:
              id: 1
              data:
                data:
                  key: value
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: true
              overlap: 1
              inner_id: 1
              total_annotations: 1
              cancelled_annotations: 1
              total_predictions: 1
              comment_count: 1
              unresolved_comment_count: 1
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    get:
      path: /api/tasks/{id}/
      method: GET
      auth: true
      docs: >

        Get task data, metadata, annotations and other attributes for a specific
        labeling task by task ID.
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Get task
      response:
        docs: ''
        type: root.DataManagerTaskSerializer
      examples:
        - path-parameters:
            id: id
          response:
            body:
              id: 1
              predictions: predictions
              annotations:
                - id: 1
                  created_username: created_username
                  created_ago: created_ago
                  completed_by: 1
                  unique_id: unique_id
                  was_cancelled: true
                  ground_truth: true
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  draft_created_at: '2024-01-15T09:30:00Z'
                  lead_time: 1.1
                  import_id: 1
                  last_action: prediction
                  task: 1
                  project: 1
                  updated_by: 1
                  parent_prediction: 1
                  parent_annotation: 1
                  last_created_by: 1
              drafts: drafts
              annotators: annotators
              inner_id: 1
              cancelled_annotations: 1
              total_annotations: 1
              total_predictions: 1
              completed_at: '2024-01-15T09:30:00Z'
              annotations_results: annotations_results
              predictions_results: predictions_results
              predictions_score: 1.1
              file_upload: file_upload
              storage_filename: storage_filename
              annotations_ids: annotations_ids
              predictions_model_versions: predictions_model_versions
              avg_lead_time: 1.1
              draft_exists: true
              updated_by: updated_by
              data:
                data:
                  key: value
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: true
              overlap: 1
              comment_count: 1
              unresolved_comment_count: 1
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              comment_authors:
                - 1
      audiences:
        - public
    delete:
      path: /api/tasks/{id}/
      method: DELETE
      auth: true
      docs: Delete a task in Label Studio. This action cannot be undone!
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Delete task
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/tasks/{id}/
      method: PATCH
      auth: true
      docs: Update the attributes of an existing labeling task.
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Update task
      request:
        name: TasksUpdateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: ''
        type: root.BaseTask
      examples:
        - path-parameters:
            id: id
          request: {}
          response:
            body:
              id: 1
              data:
                data:
                  key: value
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: true
              overlap: 1
              inner_id: 1
              total_annotations: 1
              cancelled_annotations: 1
              total_predictions: 1
              comment_count: 1
              unresolved_comment_count: 1
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
