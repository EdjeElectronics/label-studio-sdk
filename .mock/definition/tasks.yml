types:
  TasksImportTasksRequestItem:
    properties:
      data:
        type: optional<map<string, unknown>>
        docs: Data of the task
      project:
        type: optional<integer>
        docs: Project ID for this task
      annotations:
        type: optional<list<map<string, unknown>>>
        docs: Annotations for this task
      predictions:
        type: optional<list<map<string, unknown>>>
        docs: Predictions for this task
      is_labeled:
        type: optional<boolean>
        docs: Whether the task is labeled or not
      overlap:
        type: optional<double>
        docs: Overlap for the task
  TasksImportTasksResponse:
    docs: Task creation response
    properties:
      task_count:
        type: optional<integer>
        docs: Number of tasks added
      annotation_count:
        type: optional<integer>
        docs: Number of annotations added
      predictions_count:
        type: optional<integer>
        docs: Number of predictions added
      duration:
        type: optional<double>
        docs: Time in seconds to create
      file_upload_ids:
        type: optional<list<integer>>
        docs: Database IDs of uploaded files
      could_be_tasks_list:
        type: optional<boolean>
        docs: Whether uploaded files can contain lists of tasks, like CSV/TSV files
      found_formats:
        type: optional<list<string>>
        docs: The list of found file formats
      data_columns:
        type: optional<list<string>>
        docs: The list of found data columns
  TasksListRequestFields:
    enum:
      - all
      - task_only
  TasksListResponse:
    properties:
      tasks:
        type: optional<list<root.Task>>
        docs: >-
          List of tasks, each task contains predictions and annotations if
          `fields` query parameter is set to `all`
      total:
        type: optional<integer>
        docs: Total number of tasks
      total_annotations:
        type: optional<integer>
        docs: Total number of annotations
      total_predictions:
        type: optional<integer>
        docs: Total number of predictions
imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    import_tasks:
      path: /api/projects/{id}/import
      method: POST
      auth: true
      docs: >

        Use this API endpoint to import labeling tasks in bulk. Note that each
        POST request is limited at 250K tasks and 200 MB.

        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 


        <Note>

        Imported data is verified against a project *label_config* and must
        include all variables that were used in the *label_config*. 


        For example, if the label configuration has a *$text* variable, then
        each item in a data object must include a `text` field.

        </Note>


        There are three possible ways to import tasks with this endpoint:


        #### 1\. **POST with data**

        Send JSON tasks as POST data. Only JSON is supported for POSTing files
        directly.


        Update this example to specify your authorization token and Label Studio
        instance host, then run the following from

        the command line:


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' --data '[{"text":
        "Some text 1"}, {"text": "Some text 2"}]'

        ```


        #### 2\. **POST with files**

        Send tasks as files. You can attach multiple files with different names.


        - **JSON**: text files in JavaScript object notation format

        - **CSV**: text files with tables in Comma Separated Values format

        - **TSV**: text files with tables in Tab Separated Value format

        - **TXT**: simple text files are similar to CSV with one column and no
        header, supported for projects with one source only


        Update this example to specify your authorization token, Label Studio
        instance host, and file name and path,

        then run the following from the command line:


        ```bash

        curl -H 'Authorization: Token abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' -F
        ‘file=@path/to/my_file.csv’

        ```


        #### 3\. **POST with URL**

        You can also provide a URL to a file with labeling tasks. Supported file
        formats are the same as in option 2.


        ```bash

        curl -H 'Content-Type: application/json' -H 'Authorization: Token
        abc123' \

        -X POST 'https://localhost:8080/api/projects/1/import' \

        --data '[{"url": "http://example.com/test1.csv"}, {"url":
        "http://example.com/test2.csv"}]'

        ```


        <br>
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Import tasks
      request:
        body:
          docs: List of tasks to import
          type: list<TasksImportTasksRequestItem>
      response:
        docs: Tasks successfully imported
        type: TasksImportTasksResponse
      errors:
        - root.BadRequestError
      examples:
        - path-parameters:
            id: 1
          request:
            - {}
          response:
            body:
              task_count: 1
              annotation_count: 1
              predictions_count: 1
              duration: 1.1
              file_upload_ids:
                - 1
              could_be_tasks_list: true
              found_formats:
                - found_formats
              data_columns:
                - data_columns
      audiences:
        - public
    create_many_status:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: >

        Get information about an async project import operation. This can be
        especially useful to monitor status, as large import jobs can take
        time. 


        You will need the project ID and the unique ID of the import operation. 


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 


        The import ID is returned as part of the response when you call [Import
        tasks](import-tasks). 
      path-parameters:
        id:
          type: integer
          docs: The project ID.
        import_pk: string
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: import_pk
          response:
            body:
              id: 1
              preannotated_from_fields:
                preannotated_from_fields:
                  key: value
              commit_to_project: true
              return_task_ids: true
              status: created
              url: url
              traceback: traceback
              error: error
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              finished_at: '2024-01-15T09:30:00Z'
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              could_be_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              tasks:
                tasks:
                  key: value
              task_ids:
                task_ids:
                  key: value
              project: 1
      audiences:
        - public
    delete_all_tasks:
      path: /api/projects/{id}/tasks/
      method: DELETE
      auth: true
      docs: >

        Delete all tasks from a specific project.


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). 
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project.
      display-name: Delete all tasks
      examples:
        - path-parameters:
            id: 1
      audiences:
        - public
    list:
      path: /api/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a list of tasks. 


        You can use the query parameters to filter the list by project and/or
        view (a tab within the Data Manager). You can also optionally add
        pagination to make the response easier to parse. 


        The project ID can be found in the URL when viewing the project in Label
        Studio, or you can retrieve all project IDs using [List all
        projects](../projects/list). The view ID can be found using [List
        views](../views/list).
      pagination:
        offset: $request.page
        results: $response.tasks
      display-name: Get task list
      request:
        name: TasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
          view:
            type: optional<integer>
            docs: View ID
          project:
            type: optional<integer>
            docs: Project ID
          resolve_uri:
            type: optional<boolean>
            docs: Resolve task data URIs using Cloud Storage
          fields:
            type: optional<TasksListRequestFields>
            docs: >-
              Set to "all" if you want to include annotations and predictions in
              the response
          review:
            type: optional<boolean>
            docs: Get tasks for review
          include:
            type: optional<string>
            docs: Specify which fields to include in the response
      response:
        docs: List of Tasks
        type: TasksListResponse
      examples:
        - name: response
          response:
            body:
              tasks:
                - id: 1
                  predictions:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      score: 0.9
                      model_version: '1.0'
                      task: 1
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                  annotations:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                      completed_by: 1
                      updated_by: 1
                      was_cancelled: false
                      ground_truth: false
                      lead_time: 12.34
                  drafts:
                    - {}
                  annotators:
                    - 1
                  inner_id: 1
                  cancelled_annotations: 1
                  total_annotations: 1
                  total_predictions: 1
                  completed_at: '2024-01-15T09:30:00Z'
                  file_upload: 1
                  storage_filename: storage_filename
                  avg_lead_time: 1.1
                  draft_exists: true
                  updated_by:
                    - {}
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  is_labeled: true
                  overlap: 1.1
                  comment_count: 1
                  unresolved_comment_count: 1
                  last_comment_updated_at: '2024-01-15T09:30:00Z'
                  project: 1
                  comment_authors:
                    - 1
              total: 1
              total_annotations: 1
              total_predictions: 1
      audiences:
        - public
    create:
      path: /api/tasks/
      method: POST
      auth: true
      docs: >

        Create a new labeling task in Label Studio.


        The data you provide depends on your labeling config and data type. 


        You will also need to provide a project ID. The project ID can be found
        in the URL when viewing the project in Label Studio, or you can retrieve
        all project IDs using [List all projects](../projects/list). 
      display-name: Create task
      request:
        name: TasksCreateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Created task
        type: root.BaseTask
      examples:
        - name: response
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    get:
      path: /api/tasks/{id}/
      method: GET
      auth: true
      docs: >

        Get task data, metadata, annotations and other attributes for a specific
        labeling task by task ID.

        The task ID is available from the Label Studio URL when viewing the
        task, or you can retrieve it programmatically with [Get task
        list](list). 
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Get task
      response:
        docs: Task
        type: root.BaseTask
      examples:
        - name: response
          path-parameters:
            id: id
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    delete:
      path: /api/tasks/{id}/
      method: DELETE
      auth: true
      docs: >

        Delete a task in Label Studio. 


        You will need the task ID. This is available from the Label Studio URL
        when viewing the task, or you can retrieve it programmatically with [Get
        task list](list). 


        <Warning>This action cannot be undone.</Warning>
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Delete task
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/tasks/{id}/
      method: PATCH
      auth: true
      docs: >

        Update the attributes of an existing labeling task.


        You will need the task ID. This is available from the Label Studio URL
        when viewing the task, or you can retrieve it programmatically with [Get
        task list](list). 
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Update task
      request:
        name: TasksUpdateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Updated task
        type: root.BaseTask
      examples:
        - name: response
          path-parameters:
            id: id
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
