imports:
  root: __package__.yml
service:
  auth: false
  base-path: ''
  endpoints:
    create_many_status:
      path: /api/projects/{id}/imports/{import_pk}/
      method: GET
      auth: true
      docs: Return data related to async project import operation
      path-parameters:
        id:
          type: integer
          docs: A unique integer value identifying this project import.
        import_pk: string
      display-name: Get project import info
      response:
        docs: ''
        type: root.ProjectImport
      examples:
        - path-parameters:
            id: 1
            import_pk: import_pk
          response:
            body:
              id: 1
              preannotated_from_fields:
                preannotated_from_fields:
                  key: value
              commit_to_project: true
              return_task_ids: true
              status: created
              url: url
              traceback: traceback
              error: error
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              finished_at: '2024-01-15T09:30:00Z'
              task_count: 1
              annotation_count: 1
              prediction_count: 1
              duration: 1
              file_upload_ids:
                file_upload_ids:
                  key: value
              could_be_tasks_list: true
              found_formats:
                found_formats:
                  key: value
              data_columns:
                data_columns:
                  key: value
              tasks:
                tasks:
                  key: value
              task_ids:
                task_ids:
                  key: value
              project: 1
      audiences:
        - public
    list:
      path: /api/tasks/
      method: GET
      auth: true
      docs: >

        Retrieve a list of tasks with pagination for a specific view or project,
        by using filters and ordering.
      pagination:
        offset: $request.page
        results: $response.tasks
      display-name: Get tasks list
      request:
        name: TasksListRequest
        query-parameters:
          page:
            type: optional<integer>
            docs: A page number within the paginated result set.
          page_size:
            type: optional<integer>
            docs: Number of results to return per page.
          view:
            type: optional<integer>
            docs: View ID
          project:
            type: optional<integer>
            docs: Project ID
          resolve_uri:
            type: optional<boolean>
            docs: Resolve task data URIs using Cloud Storage
          fields:
            type: optional<TasksListRequestFields>
            docs: >-
              Set to "all" if you want to include annotations and predictions in
              the response
          review:
            type: optional<boolean>
            docs: Get tasks for review
          include:
            type: optional<string>
            docs: Specify which fields to include in the response
      response:
        docs: List of Tasks
        type: TasksListResponse
      examples:
        - name: response
          response:
            body:
              tasks:
                - id: 1
                  predictions:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      score: 0.9
                      model_version: '1.0'
                      task: 1
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                  annotations:
                    - result:
                        '0':
                          from_name: sentiment
                          to_name: text
                          type: choices
                          value:
                            value:
                              choices:
                                '0': POSITIVE
                      created_at: '2021-01-01T00:00:00Z'
                      updated_at: '2021-01-01T00:00:00Z'
                      completed_by: 1
                      updated_by: 1
                      was_cancelled: false
                      ground_truth: false
                      lead_time: 12.34
                  drafts:
                    - {}
                  annotators:
                    - 1
                  inner_id: 1
                  cancelled_annotations: 1
                  total_annotations: 1
                  total_predictions: 1
                  completed_at: '2024-01-15T09:30:00Z'
                  file_upload: 1
                  storage_filename: storage_filename
                  avg_lead_time: 1.1
                  draft_exists: true
                  updated_by:
                    - {}
                  created_at: '2024-01-15T09:30:00Z'
                  updated_at: '2024-01-15T09:30:00Z'
                  is_labeled: true
                  overlap: 1.1
                  comment_count: 1
                  unresolved_comment_count: 1
                  last_comment_updated_at: '2024-01-15T09:30:00Z'
                  project: 1
                  comment_authors:
                    - 1
              total: 1
              total_annotations: 1
              total_predictions: 1
      audiences:
        - public
    create:
      path: /api/tasks/
      method: POST
      auth: true
      docs: Create a new labeling task in Label Studio.
      display-name: Create task
      request:
        name: TasksCreateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Created task
        type: root.BaseTask
      examples:
        - name: response
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    get:
      path: /api/tasks/{id}/
      method: GET
      auth: true
      docs: >

        Get task data, metadata, annotations and other attributes for a specific
        labeling task by task ID.
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Get task
      response:
        docs: Task
        type: root.BaseTask
      examples:
        - name: response
          path-parameters:
            id: id
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
    delete:
      path: /api/tasks/{id}/
      method: DELETE
      auth: true
      docs: Delete a task in Label Studio. This action cannot be undone!
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Delete task
      examples:
        - path-parameters:
            id: id
      audiences:
        - public
    update:
      path: /api/tasks/{id}/
      method: PATCH
      auth: true
      docs: Update the attributes of an existing labeling task.
      path-parameters:
        id:
          type: string
          docs: Task ID
      display-name: Update task
      request:
        name: TasksUpdateRequest
        body:
          properties:
            data:
              type: optional<map<string, unknown>>
              docs: Task data dictionary with arbitrary keys and values
            project:
              type: optional<integer>
              docs: Project ID
      response:
        docs: Updated task
        type: root.BaseTask
      examples:
        - name: response
          path-parameters:
            id: id
          request:
            data:
              image: https://example.com/image.jpg
              text: Hello, world!
            project: 1
          response:
            body:
              id: 1
              data:
                image: https://example.com/image.jpg
                text: Hello, AI!
              meta:
                meta:
                  key: value
              created_at: '2024-01-15T09:30:00Z'
              updated_at: '2024-01-15T09:30:00Z'
              is_labeled: false
              overlap: 1
              inner_id: 1
              total_annotations: 0
              cancelled_annotations: 0
              total_predictions: 0
              comment_count: 0
              unresolved_comment_count: 0
              last_comment_updated_at: '2024-01-15T09:30:00Z'
              project: 1
              updated_by: 1
              file_upload: 1
              comment_authors:
                - 1
      audiences:
        - public
types:
  TasksListRequestFields:
    enum:
      - all
      - task_only
  TasksListResponse:
    properties:
      tasks:
        type: optional<list<root.Task>>
        docs: >-
          List of tasks, each task contains predictions and annotations if
          `fields` query parameter is set to `all`
      total:
        type: optional<integer>
        docs: Total number of tasks
      total_annotations:
        type: optional<integer>
        docs: Total number of annotations
      total_predictions:
        type: optional<integer>
        docs: Total number of predictions
